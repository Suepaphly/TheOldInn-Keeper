            const currentContribution = await db.get(`monster_summoner_${playerid}`) || 0;
            await db.set(`monster_summoner_${playerid}`, currentContribution + cost);
            
            console.log(`Player ${playerid} summoned ${number} ${type}(s) for ${cost} kopeks`);
            return true;
        } else {
            console.log(`Player ${playerid} doesn't have enough kopeks to summon ${number} ${type}(s)`);
            return false;
        }
    } catch (error) {
        console.error("Error summoning monster:", error);
        return false;
    }
}

async function handleBankStealing(channel) {
    try {
        // Get all bank accounts
        const allEntries = await db.all();
        const bankEntries = allEntries.filter(entry => entry.id.startsWith("bank_"));
        
        if (bankEntries.length === 0) {
            if (channel) channel.send("üí∞ No bank accounts found to raid!");
            return;
        }
        
        let totalStolen = 0;
        let stealingResults = [];
        
        // Steal from each player's bank (20-80%)
        for (const entry of bankEntries) {
            const userId = entry.id.split('_')[1];
            const bankAmount = entry.value || 0;
            
            if (bankAmount > 0) {
                const stealPercentage = Math.floor(Math.random() * 61) + 20; // 20-80%
                const stolenAmount = Math.floor(bankAmount * (stealPercentage / 100));
                
                await db.sub(`bank_${userId}`, stolenAmount);
                totalStolen += stolenAmount;
                
                stealingResults.push({
                    userId: userId,
                    stolen: stolenAmount,
                    percentage: stealPercentage
                });
            }
        }
        
        if (totalStolen === 0) {
            if (channel) channel.send("üí∞ The monster army found no wealth to plunder!");
            return;
        }
        
        // Get monster summoners and their contributions
        const summonerEntries = allEntries.filter(entry => entry.id.startsWith("monster_summoner_"));
        let totalContributions = 0;
        const summoners = [];
        
        for (const entry of summonerEntries) {
            const userId = entry.id.split('_')[2];
            const contribution = entry.value || 0;
            if (contribution > 0) {
                summoners.push({ userId, contribution });
                totalContributions += contribution;
            }
        }
        
        // Distribute stolen funds to summoners
        if (summoners.length > 0 && totalContributions > 0) {
            for (const summoner of summoners) {
                const share = Math.floor(totalStolen * (summoner.contribution / totalContributions));
                await db.add(`money_${summoner.userId}`, share);
            }
        }
        
        // Clear summoner tracking for next battle
        for (const entry of summonerEntries) {
            await db.delete(entry.id);
        }
        
        // Send results to Discord
        if (channel) {
            let message = `üí∞ **BANK RAID RESULTS** üí∞\n`;
            message += `Total stolen: **${totalStolen.toLocaleString()} kopeks**\n\n`;
            
            if (summoners.length > 0) {
                message += `**Rewards distributed to monster summoners:**\n`;
                for (const summoner of summoners) {
                    const share = Math.floor(totalStolen * (summoner.contribution / totalContributions));
                    const percentage = Math.round((summoner.contribution / totalContributions) * 100);
                    message += `<@${summoner.userId}>: ${share.toLocaleString()} kopeks (${percentage}% of loot)\n`;
                }
            } else {
                message += `No monster summoners found - stolen wealth vanishes into the void!\n`;
            }
            
            message += `\n**Individual bank losses:**\n`;
            for (const result of stealingResults) {
                message += `<@${result.userId}>: -${result.stolen.toLocaleString()} kopeks (${result.percentage}%)\n`;
            }
            
            channel.send(message);
        }
        
    } catch (error) {
        console.error("Error handling bank stealing:", error);
        if (channel) channel.send("‚ùå Error processing bank raid!");
    }
}


//--------------------- Utility Functions

async function endTroopContract() {
    try {
        // Dismiss all troops from all locations
        for (const wall of wallArray) {
            const emptyTroops = {town_guard: 0, mercenary: 0, soldier: 0, knight: 0, royal_guard: 0, total: 0};
            await db.set(`Troops_${wall}`, emptyTroops);
        }
        console.log("All troop contracts have ended. Troops dismissed.");
    } catch (error) {
        console.error("Error ending troop contracts:", error);
    }
}

function getPlayerAttack() {
    // Adds and returns all the player attacks for the turn
}

async function calculateTownDamage() {
    try {
        let totalDamage = 0;
        
        // Calculate damage from each wall layer
        for (const wall of wallArray) {
            const troops = await db.get(`Troops_${wall}`) || {};
            const traps = await db.get(`Traps_${wall}`) || {};
            
            // Add troop damage
            for (let i = 0; i < troopArray.length; i++) {
                const troopType = troopArray[i];
                const troopCount = troops[troopType] || 0;
                totalDamage += troopCount * troopDmgArray[i];
            }
            
            // Add trap damage
            for (let i = 0; i < trapArray.length; i++) {
                const trapType = trapArray[i];
                const trapCount = traps[trapType] || 0;
                totalDamage += trapCount * trapDmgArray[i];
            }
        }
        
        return totalDamage;
    } catch (error) {
        console.error("Error calculating town damage:", error);
        return 0;
    }
}

function calcTrap(wall) {
    // Calculate damage or effects caused by traps
}

function calcArmy(field) {
    // Calculate the effectiveness or damage caused by the army
}

async function applyDamageToWalls(damage, channel) {
    try {
        let remainingDamage = damage;
        let damageReport = [];
        let trapDamage = 0;
        
        // Damage ramparts first
        const ramparts = await db.get("rampart") || 0;
        if (remainingDamage > 0 && ramparts > 0) {
            const rampartDamage = Math.min(remainingDamage, ramparts);
            await db.sub("rampart", rampartDamage);
            remainingDamage -= rampartDamage;
            damageReport.push(`üõ°Ô∏è Ramparts: -${rampartDamage} HP`);
            
            // Fire rampart traps when breached
            if (rampartDamage > 0) {
                const rampartTraps = await db.get("Traps_rampart") || {};
                let rampartTrapDamage = 0;
                for (let i = 0; i < trapArray.length; i++) {
                    const trapType = trapArray[i];
                    const trapCount = rampartTraps[trapType] || 0;
                    rampartTrapDamage += trapCount * trapDmgArray[i];
                }
                if (rampartTrapDamage > 0) {
                    trapDamage += rampartTrapDamage;
                    if (channel) channel.send(`üí£ **Rampart traps activate!** Dealing ${rampartTrapDamage} damage to attackers!`);
                }
            }
        }
        
        // Then damage walls
        const walls = await db.get("wall") || 0;
        if (remainingDamage > 0 && walls > 0) {
            const wallDamage = Math.min(remainingDamage, walls);
            await db.sub("wall", wallDamage);
            remainingDamage -= wallDamage;
            damageReport.push(`üß± Walls: -${wallDamage} HP`);
            
            // Fire wall traps when breached
            if (wallDamage > 0) {
                const wallTraps = await db.get("Traps_wall") || {};
                let wallTrapDamage = 0;
                for (let i = 0; i < trapArray.length; i++) {
                    const trapType = trapArray[i];
                    const trapCount = wallTraps[trapType] || 0;
                    wallTrapDamage += trapCount * trapDmgArray[i];
                }
                if (wallTrapDamage > 0) {
                    trapDamage += wallTrapDamage;
                    if (channel) channel.send(`üí£ **Wall traps activate!** Dealing ${wallTrapDamage} damage to attackers!`);
                }
            }
        }
        
        // Finally damage castle
        const castle = await db.get("castle") || 0;
        if (remainingDamage > 0 && castle > 0) {
            const castleDamage = Math.min(remainingDamage, castle);
            await db.sub("castle", castleDamage);
            remainingDamage -= castleDamage;
            damageReport.push(`üè∞ Castle: -${castleDamage} HP`);
            
            // Fire castle traps when breached
            if (castleDamage > 0) {
                const castleTraps = await db.get("Traps_castle") || {};
                let castleTrapDamage = 0;
                for (let i = 0; i < trapArray.length; i++) {
                    const trapType = trapArray[i];
                    const trapCount = castleTraps[trapType] || 0;
                    castleTrapDamage += trapCount * trapDmgArray[i];
                }
                if (castleTrapDamage > 0) {
                    trapDamage += castleTrapDamage;
                    if (channel) channel.send(`üí£ **Castle traps activate!** Dealing ${castleTrapDamage} damage to attackers!`);
                }
            }
        }
        
        if (channel && damageReport.length > 0) {
            channel.send(`üí• **Damage Report:** ${damageReport.join(", ")}`);
        }
        
        // Apply trap damage back to monsters if any traps fired
        if (trapDamage > 0) {
            await applyTrapDamageToMonsters(trapDamage, channel);
        }
        
    } catch (error) {
        console.error("Error applying damage to walls:", error);
    }
}

async function applyTrapDamageToMonsters(trapDamage, channel) {
    try {
        const monsters = await db.get("Monsters") || {};
        let remainingDamage = trapDamage;
        let totalKilled = 0;
        let killReport = [];
        
        // Apply trap damage to monsters (starting with weakest)
        for (let i = 0; i < monsterArray.length && remainingDamage > 0; i++) {
            const monsterType = monsterArray[i];
            const monsterCount = monsters[monsterType] || 0;
            if (monsterCount > 0) {
                const monstersKilled = Math.min(Math.floor(remainingDamage / monsterHealthArray[i]), monsterCount);
                if (monstersKilled > 0) {
                    await db.sub(`Monsters.${monsterType}`, monstersKilled);
                    remainingDamage -= monstersKilled * monsterHealthArray[i];
                    totalKilled += monstersKilled;
                    killReport.push(`${monstersKilled} ${monsterType}(s)`);
                }
            }
        }
        
        if (channel && totalKilled > 0) {
            channel.send(`üî• **Trap casualties:** ${killReport.join(", ")} (${trapDamage} trap damage dealt)`);
        }
    } catch (error) {
        console.error("Error applying trap damage to monsters:", error);
    }
}

async function addMonster(type, number) {
    try {
        const typeIndex = monsterArray.indexOf(type);
        if (typeIndex !== -1) {
            await db.add(`Monsters.${type}`, number);
            console.log(`Added ${number} ${type}(s) to the monster army`);
        } else {
            console.log("No monsters of type: '" + type + "' in Database");
        }
    } catch (error) {
        console.error('Failed to add monster:', error);
    }
}

// Function to schedule random monster attacks
function scheduleRandomAttack() {
    // Generate random time between 1-24 hours (in milliseconds)
    const minHours = 1;
    const maxHours = 24;
    const randomHours = Math.random() * (maxHours - minHours) + minHours;
    const randomMs = randomHours * 60 * 60 * 1000;
    
    console.log(`Next automatic monster attack scheduled in ${randomHours.toFixed(1)} hours`);
    
    setTimeout(async () => {
        try {
            // Check if there are monsters in the pool
            const monsters = await db.get("Monsters") || {};
            const totalMonsters = Object.values(monsters).reduce((sum, count) => sum + count, 0);
            
            if (totalMonsters >= 10 && !lockArena && scheduledAttackChannel) {
                console.log("Automatic monster attack triggered!");
                scheduledAttackChannel.send("üåô **AUTOMATIC MONSTER ATTACK!** The creatures of the night have grown restless and attack the town!");
                
                // Start the battle
                await startBattle(scheduledAttackChannel);
            } else {
                console.log("Automatic attack skipped - not enough monsters or battle in progress");
            }
        } catch (error) {
            console.error("Error during scheduled attack:", error);
        }
        
        // Schedule the next random attack
        scheduleRandomAttack();
    }, randomMs);
}