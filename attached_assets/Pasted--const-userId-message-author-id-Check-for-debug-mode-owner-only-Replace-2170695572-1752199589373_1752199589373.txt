   const userId = message.author.id;

    // Check for debug mode (owner only) - Replace '217069557263286273' with your actual Discord user ID
    if (args[0] === 'debug') { // Temporarily removed owner check for testing
        if (!args[1]) {
            const debugEmbed = new EmbedBuilder()
                .setTitle("üîß QUEST DEBUG COMMANDS")
                .setColor("#FFA500")
                .setDescription("**Owner-only debug commands for testing individual quest types**\n\n**Available Quest Names:**\n‚Ä¢ `monster` - Combat quest with 2 monsters\n‚Ä¢ `riddle` - Ancient riddle solving quest\n‚Ä¢ `maze` - Hedge maze navigation quest\n‚Ä¢ `trolley` - Moral dilemma trolley problem")
                .addFields(
                    { name: "Usage", value: "`=quest debug <questname>`", inline: false },
                    { name: "Quest Details", value: "üó°Ô∏è **monster** - Fight Goblin Scout ‚Üí Orc Raider\nüß© **riddle** - Solve 2 random riddles (death on failure)\nüåø **maze** - Navigate 2-stage maze with traps/combat\nüöÉ **trolley** - Face moral choices with vengeance risk", inline: false },
                    { name: "Debug Features", value: "‚Ä¢ Complete after 1 quest instead of 2\n‚Ä¢ 30-minute timeout still applies\n‚Ä¢ No real rewards given", inline: false }
                );

            return message.channel.send({ embeds: [debugEmbed] });
        }

        const questType = args[1].toLowerCase();
        if (!questTypes[questType]) {
            return message.channel.send("‚ùå Invalid quest type! Available: monster, riddle, maze, trolley");
        }

        // Start debug quest immediately
        await startDebugQuest(message, userId, questType);
        return;
    }

    // Check if user is already on a quest
    if (activeQuests.has(userId)) {
        return message.channel.send("‚ùå You are already on a quest! Complete it first before starting another.");
    }

    // Check if user is dead
    const deathTimer = await db.get(`death_cooldown_${userId}`);
    if (deathTimer && Date.now() - deathTimer < 86400000) { // 24 hours
        return message.channel.send("üíÄ You cannot go on quests while dead! Use `=revive` first.");
    }

    // Create location selection embed
    const embed = new EmbedBuilder()
        .setTitle("üó∫Ô∏è CHOOSE YOUR DESTINATION")
        .setColor("#FFD700")
        .setDescription("Select a location to explore. You must complete **TWO quests** to earn the 250 kopek reward!\n\n‚ö†Ô∏è Once started, you cannot engage in combat, gambling, or economic activities until completed!")
        .addFields(
            { name: locations.plains.name, value: `${locations.plains.description}\n*Leads to: ${locations.plains.second}*`, inline: false },
            { name: locations.forest.name, value: `${locations.forest.description}\n*Leads to: ${locations.forest.second}*`, inline: false }
        )
        .setFooter({ text: "‚è∞ You have 30 minutes to complete once started!" });

    // Create buttons
    const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('location_plains')
                .setLabel('üåæ Wide Open Plains')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('location_forest')
                .setLabel('üå≤ Dark Forest')
                .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
                .setCustomId('quest_cancel')
                .setLabel('‚ùå Cancel')
                .setStyle(ButtonStyle.Secondary)
        );

    const questMessage = await message.channel.send({ 
        embeds: [embed], 
        components: [row] 
    });

    // Set up collector
    const filter = (interaction) => {
        return interaction.user.id === message.author.id;
    };

    const collector = questMessage.createMessageComponentCollector({
        filter,
        time: 60000 // 1 minute to choose
    });

    collector.on('collect', async (interaction) => {
        if (interaction.customId === 'quest_cancel') {
            await interaction.update({
                embeds: [new EmbedBuilder()
                    .setTitle("‚ùå Quest Cancelled")
                    .setColor("#FF0000")
                    .setDescription("You decided not to embark on a quest today.")],
                components: []
            });
            collector.stop();
            return;
        }

        // Start the selected location
        const location = interaction.customId.replace('location_', '');
        await startLocationQuest(interaction, location, userId);
        collector.stop();
    });

    collector.on('end', (collected, reason) => {
        if (reason === 'time' && !collected.size) {
            questMessage.edit({
                embeds: [new EmbedBuilder()
                    .setTitle("‚è∞ Quest Selection Timeout")
                    .setColor("#FF0000")
                    .setDescription("You took too long to choose a location.")],
                components: []
            });
        }
    });
};
